Java features
Data types
Literals
Array
instance variable - memory is not allocated till object is created
Class variable - has memomry before object creation (Static)

JDK = JRE + Developement tools.
JRE = JVM + class libraries.
JVM - platform dependent // WE have JVM for each platform
                            JDK

     JRE                       +                      DEvelopment tools
jvm + CLASS LIBRARIES
---------------------------------------------------------------
                    java application(PID) .java file
                    compiler compiles .java
                    Bytecode (PID) .class file
                    
   JVM for windows          JVM for Linux       JVM for MAC                 
            Convert in to machine specific code


-----Data Types--------
WE can give long value to a float variable

long l = 1234;
float f = l; // perfectly valid

------Type casting---
Implicit casting : smaller data type to bigger data type
Widening or upcasting
Explicit casting : Bigger type to smaller data type
Narrowing or downcasting

----Arrays----

int[] x[] --Two dimensional array
int[][] x --Two dimensional array
int x[][] --Two dimensional array

int[] []a,b -- a,b are Two dimensional arrays
int[] a,b[] -- a-1,b-2 dimensional array
int[] []a,[]b -- a-2,b- syntax error -- We can give dimension to only first variable by having [] "before" variable name
----------------------------------------After variable name we can give dimensions.

int[] x = new x[-5] -- Compiles successfully but run time error -- negative arraySize exception

Difference between Array(java.lang) and Arrays(java.util.Arrays)
Ex: Arrays.sort(arrayName)

possible values for array declaration-- int[] x = new int[size]
size can be only byte,short,char,int

int[][] x = new int[][5] // Wrong
int[][][] z = new int[3][][3] // Wrong base value must be there before giving size to next level array.

make sure difference between length vs length().
---Anonymous Array--
just used for instant purose, never goning to use again
ex: new int[] {1,2,3,4}  // No name, just used for instant purpose, not able to use again as there is no name.

* size and initilization should not be given
ex: int[] x = new int[5]; // valid
    int[] x = new int[] {1,2,3,4,5} // valid
    int[] x = new int[5]{1,2,3,4,5} // Invalid


String s;
s.concat("shhiva") // Wrong --We cannot add or perform any operation on null like s.length();
Picture-- 1

------------------------------------------------------
VAriables:
Based on type of value-
Primitive- variables holding primitive values
Reference- variable holding objects
Based on behaviour and place where it is declared
1. Instance variables- If the value of a variable is different from object to object(Objet level variable).
ex: class Student{
    String name; // Instance variable
    int rollNo; // instance variable
    
2. Static variable - If the vaue of a variable is same for different objects(Class level variable).
video 13 and 14 most important.
//static methodscannot be empty
// We cannot access instant variables in static methods or blocks // most important

3. Local variables
// JVM will not provide default values to local variables. If not provided initilization compiler will give left and right only when we try to access it.
// scope is between {}.

--------Main method-------
Public static void main(String[] args) // syntax JVMlooks for
video 17 for main method

-----Operators and assignments--------
Increment and decrement operator cannot be applied on values and final variables // ++10 // Wrong ---- 
final int x = 100
x++ // compile time error
if we want to use == operator the operands shuld have some relation i.e we have to check == for parent to child, child to parent or for same type objects
student == teacher // compile tme error-- incomaprable typrs


-----------loop----------
break statement can be used on only for, while or labelled block.
conitnue is used only in loops

video 24 and 25 problems

------java source statements--------
import statements:
    1. Implicit import --> java.util.*
    2. Explicit import --> java.util.ArrayList; // most recommended to use explicit
 --> Performance is same for both imports, don't think it is good for implicit
 
// In import statements the precedence for imported statements is explicit import -> Current working directory -> implicit import
  Time         import statemet              fully qualified name
compile time      more                          less
run time         same                           same

about packages:

-1st statement should be a package statement in the program
-Only 1 package statement is allowed in the program
-empty program is a valid java program // we can compile it.
-Any number of import statements are allowed in the program
- Any number of classes, interfaces, enums, bastract classes are allowed in the program // order is not required.
- order of statemtns should be package statement followed by import statement followed by classes or interfaces etc.


Access modifiers
Top level classes can use 
1. public // Can be accessed from anywhere
2. default // can be accessed only in current package
3. abstract // we cannot create a object for this class
4. final // we cannot extend this class
5. strictfp //

additional modifiers
1. private :  only in the same class
2. Protected : Anywhere in the the package and for only child classes
                MAny loop holes in protected modifier // video 29 -21/02 30:00 - 50:00
                
                In other packages we can access protected by only child class references. // most important
                pic 2
                
            
--------Interfaces-----------------
// methods cannot be overided when they have 2 same methods in 2 interfaces with differenet return types.
// Same as above
-- Java class cannot implement 2 interfaces with same method name and different return types --23/02.

// Static methods cannot be overrided in the implementation class as they are not available to the implementation class //most important
Marker Interface: An interface with no methods and the objects implementing interface get some properties.

most important:  
https://www.geeksforgeeks.org/can-we-overload-or-override-static-methods-in-java/ 

--------OOPs Concepts----------------
1. Data hiding : Internal data not exposed directly to outside // can be achieved by using private modifier.
2. Abstraction : Hiding implementation // Security and enhancement is easy.
3. Encapsulation : Process of binding variables(data) and methods into a single unit is known as encapsulation. // every class is an example of encapsulation.
         Encapsulation = Data Hiding + Astraction.
         
video 03/03/2018 - most important for overloadig concepts. 
ex:
m1(String){
sout "str"
}
m1(Object){
sout "obj"
}
if we call m1("shiva") then str will be printed.
"shiva" - string is child class of object. Child class objects will be considered first for overoading.
overloading selects the method by refererence type by compiler not the object type-- object type method is selected in overrifing concept by JVM in runtime execution.
Hence overloading is also know as static polymorphism, early binding, compile time polymorphism.

overriding video -05/03/18 some important rules
1.method signatures must be same
2.reutrn type of child can be a co varient type
3.we cannot reduce the scope of the overriding method
4.we cannot override final method
5.we cannot override private methods as it is not availabe to the child class
exception handling in parent to child methods:
6.if a child class throws a Checked exception then parent class must throw same exception or its parent class exceptions.

static methods should be overrided by static methods only. This is not overriding. it is method hiding.
P p = new P --------- Parent
C c = new C --------- Child
P p1 = new C -------- Parent // most important point --When data hiding methods are called based on reference type.

For variables : it is called by the reference type. there is no run time selection.
must and sure example:
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication34;

/**
 *
 * @author Shiva Kumar Mutukula
 */
public class Parent {
    
    int x = 100;
    static int y = 200;

    public Parent() {
        System.out.println("parent constructor");
    }
    static{
        System.out.println("parent static block ");
    }
    
    public void m1(){
        System.out.println("javaapplication34.Parent.m1()");
    }
    public static void PtStaticMethod(){
        System.out.println("parent static method");
    }
    
}

public class JavaApplication34 extends Parent{
    int x = 300;
    static int y = 400;

    /**
     * @param args the command line arguments
     */
    static{
        System.out.println("child static block");
    }
    public static void PtStaticMethod(){
        System.out.println("child static method");
    }
    public JavaApplication34(){
        System.out.println("child constructor");
    }
        public void m1(){
        System.out.println("javaapplication34.Child.m1()");
    }
//
//    public static void main(int[] arg) {
//        System.out.println("javaapplication34.JavaApplication34.main()");
//    }
    public static void main(String[] args) {
//        PtStaticMethod();
        
        JavaApplication34 j34 = new JavaApplication34();
        Parent p = new Parent();
        Parent pc = new JavaApplication34();
        
        j34.m1();
        p.m1();
        pc.m1();
        j34.PtStaticMethod();
        p.PtStaticMethod();
        pc.PtStaticMethod();
        System.out.println(j34.x);
        System.out.println(j34.y);
        System.out.println(p.x);
        System.out.println(p.y);
        System.out.println(pc.x);
        System.out.println(pc.y);
 }
 Output:
 parent static block 
child static block
parent constructor
child constructor
parent constructor
parent constructor
child constructor
javaapplication34.Child.m1()
javaapplication34.Parent.m1()
javaapplication34.Child.m1()
child static method
parent static method
parent static method
300
400
100
200
100
200

-------------Constructor----------------
if we put a return type to the constructor it is not the error the compiler thinks it as a different method and executes the program.

recrsive call to constructors is a compile time error as compiler checks. but for methods its a runtime exception as stackoverflow

----exception handling--------

return in finally is the dominant.
try{
    return 1;
   }
catch{
    return 2;
    }
 finally {
    return 3;
    }
 ans// 3 -- Though there is no exception finally block return will be the answer.
 
 throw - to handover our created exception object to the jvm manually.
 
 most important // String s = "Shiva"
                   StringBuilder sb = "Shiva"
                   s==sb ------compile time error // touse == arguments should have some relation parent-child or child-parent
                   s.equals(sb) -- no compiletime error // eqals method returns false when we compare b/w differerent objects.
valueOf()--to convert primitive to wrapper object
valueOf()  -- string to wrapper object
xxxValue() -- wrapper object to primitive
toString() -- primitive to string and wrapper object to string
parsexxx() -- String to primitive

         
